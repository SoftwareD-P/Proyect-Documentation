@startuml Class Diagram MecanicHub

package "People" {
  abstract class Person {
    - id: Long
    --
    - lastName: String
    - firstName: String
    - dni: String
    - email: String
    - phone: String
    - address: String
    - registrationDate: LocalDateTime
    - user: User
    --
    + getId(): Long
    + getFullName(): String
    + getEmail(): String
    + getPhone(): String
    + getAddress(): String
    + getRegistrationDate(): LocalDateTime
    + getInformation(): String
    + updateEmail(newEmail: String): void
  }
  class VehicleOwner extends Person {
    - vehicles: List<Vehicle>
    - payments: List<Payment>
    - reviews: List<Review>
    --
    + getVehicles(): List<Vehicle>
    + addVehicle(vehicle: Vehicle): void
    + removeVehicle(vehicle: Vehicle): void
    + getVehicleByPlate(plate: String): Vehicle
    + requestService(vehicle: Vehicle, service: Service): void
    + getServiceHistory(vehicle: Vehicle): List<ServiceRecord>
    + addPayment(payment: Payment): void
    + getPaymentHistory(vehicle: Vehicle): List<Payment>
  }
  class WorkshopManager extends Person {
    - workshop: Workshop
    --
    + getWorkshop(): Workshop
    + setWorkshop(workshop: Workshop): void
  }
  abstract class Worker extends Person {
    - experienceYears: int
    - salary: double
    - hireDate: LocalDateTime
    --
    + getExperienceYears(): int
    + getSalary(): double
    + getHireDate(): LocalDateTime
    + getInformation(): String
  }
  class Mechanic extends Worker {
    - skills: List<String>
    --
    + getSkills(): List<String>
  }
  class Technician extends Worker {
    - specialty: String
    - certifications: List<String>
    --
    + getSpecialty(): String
    + getCertifications(): List<String>
  }
}

package "Identity Access Management (IAM)" {
  class User {
    - id: Long
    --
    - username: String
    - password: String
    - role: UserRole
    - isActive: boolean
    - authProvider: AuthProvider
    - lastLogin: LocalDateTime
    --
    + authenticate(username: String, password: String): boolean
    + changePassword(oldPassword: String, newPassword: String): void
  }
  enum UserRole {
    WORKSHOP_MANAGER
    VEHICLE_OWNER
    MECHANIC
    TECHNICIAN
  }
  enum AuthProvider {
    LOCAL
    GOOGLE
    FACEBOOK
  }
  class Access {
    - id: Long
    --
    - type: AccessType
    --
    + isType(type: AccessType): boolean
  }
  enum AccessType {
    LOGIN              
    WORKSHOP_SEARCH
    APPOINTMENT_BOOK
    SERVICE_REQUEST
    VEHICLE_TRACK
  }
  class AccessLog {
    - id: Long
    --
    - date: LocalDateTime
    - result: AccessResult
    - user: User
    - access: Access
    --
    + wasSuccessful(): boolean
  }
  enum AccessResult {
    SUCCESS
    FAILURE
  }
}

package "Vehicle Management" {
  class Vehicle {
    - id: Long
    --
    - plate: String
    - brand: String
    - model: String
    - year: int
    - vin: String
    - owner: VehicleOwner
    - state: VehicleState
    - type: VehicleType
    - spares: List<Spare>
    - serviceRecords: List<ServiceRecord>
    - chat: ChatSession
    --
    + displayInformation(): String
    + changeState(newState: VehicleState): void
    + getHistory(): List<ServiceRecord>
  }
  'enum VehicleState {
  '  IN_WORKSHOP
  '  IN_SERVICE
  '  READY_FOR_PICKUP
  '  DELIVERED
  '}
  enum VehicleType {
    SPORT
    SEDAN
    SUV
    ELECTRIC
  }
  class Spare {
    - id: Long
    --
    - name: String
    - manufacturer: String
    - price: double
    - stock: int
    --
    + getPrice(): double
    + displayInformation(): String
  }
  class ServiceRecord {
    - id: Long
    --
    - vehicle: Vehicle
    - serviceDate: LocalDateTime
    - description: String
    - cost: double
    - performedBy: List<Worker>
    - status: ServiceStatus
    --
    + getServiceDetails(): String
    + getTotalCost(): double
    + updateStatus(newStatus: ServiceStatus): void
    + getPerformedBy(): List<Worker>
  }
  enum ServiceStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
    CANCELLED
  }
  interface VehicleBuilder {
    + setPlate(): void
    + setBrand(): void
    + setModel(): void
    + getVehicle(): Vehicle
  }
  class VehicleDirector {
    - builder: VehicleBuilder
    --
    + setBuilder(builder: VehicleBuilder): void
    + constructVehicle(): void
  }
  class SportCar implements VehicleBuilder {
    + setPlate(): void
    + setBrand(): void
    + setModel(): void
  }
  class Sedan implements VehicleBuilder {
    + setPlate(): void
    + setBrand(): void
    + setModel(): void
  }
  class SUV implements VehicleBuilder {
    + setPlate(): void
    + setBrand(): void
    + setModel(): void
  }
  class ElectricCar implements VehicleBuilder {
    + setPlate(): void
    + setBrand(): void
    + setModel(): void
  }
}

package "Payment Management" {
  class Payment {
    - id: Long
    --
    - amount: double
    - date: LocalDateTime
    - status: PaymentStatus
    - method: PaymentMethod
    - user: User
    --
    + processPayment(): boolean
    + confirmPayment(): void
    + cancelPayment(): void
    + getDetails(): String
  }
  enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
  }
  interface PaymentMethod {
    + processPayment(amount: double): boolean
    + getMethodName(): String
  }
  class PayPal implements PaymentMethod {
    - email: String
    --
    + processPayment(amount: double): boolean
    + getMethodName(): String
  }
  class CreditCard implements PaymentMethod {
    - cardNumber: String
    - cardHolderName: String
    - expirationDate: LocalDateTime
    - cvv: String
    --
    + processPayment(amount: double): boolean
    + getMethodName(): String
  }
  class YapePlin implements PaymentMethod {
    - phoneNumber: String
    --
    + processPayment(amount: double): boolean
    + getMethodName(): String
  }
}

package "Notification & Communication" {
  abstract class Notification {
    - id: Long
    --
    - message: String
    - date: LocalDateTime
    - recipients: List<User>
    --
    + abstract send(message: String): void
  }
  class InAppNotification extends Notification {
    --
    + send(message: String): void
  }
  class EmailNotification extends Notification {
    - email: String
    --
    + send(message: String): void
  }
  class SMSNotification extends Notification {
    - phoneNumber: String
    --
    + send(message: String): void
  }
  abstract class NotificationFactory {
    + sendNotification(message: String): void
    + abstract createNotification(): Notification
  }
  class InAppNotificationFactory extends NotificationFactory {
    + createNotification(): InAppNotification
  }
  class EmailNotificationFactory extends NotificationFactory {
    + createNotification(): EmailNotification
  }
  class SMSNotificationFactory extends NotificationFactory {
    + createNotification(): SMSNotification
  }
  class NotificationService {
    + public static NotificationFactory getNotificationFactory(NotificationType notificationType): NotificationFactory
  }
  enum NotificationType {
    IN_APP
    EMAIL
    SMS
  }
  class ChatSession {
    - id: Long
    --
    - vehicle: Vehicle
    - workshop: Workshop
    - messages: List<Message>
    --
    + sendMessage(sender: User, message: Message): void
    + attachFile(sender: User, file: MediaAttachment): void
    + getReceiver(sender: User): User
  }
  class Message {
    - id: Long
    --
    - sender: User
    - content: String
    - timestamp: LocalDateTime
    - attachments: List<MediaAttachment>
    --
    + getContent(): String
    + isSender(user: User): boolean
  }
  class MediaAttachment {
    - id: Long
    --
    - fileName: String
    - mediaType: MediaType
    --
    + getFileName(): String
    + getMediaType(): MediaType
  }
  enum MediaType {
    IMAGE
    VIDEO
    DOCUMENT
  }
}

package "Review & Feedback" {
  class Review {
    - id: Long
    --
    - qualification: int
    - comment: String
    - reviewer: VehicleOwner
    - workshop: Workshop
    - date: LocalDateTime
    --
    + publish(): void
    + delete(): void
    + edit(qualification: int, comment: String): void
    + replyToReview(reply: String): void
  }
  class Feedback {
    - id: Long
    --
    - message: String
    - user: User
    - date: LocalDateTime
    - isAnonymous: boolean
    --
    + submit(): void
    + markAsReviewed(): void
    + markAsResolved(): void
  }
}

package "Promotions & Discounts" {
  class Promotion {
    - id: Long
    --
    - title: String
    - description: String
    - discountPercentage: double
    - startDate: LocalDateTime
    - endDate: LocalDateTime
    - isActive: boolean
    --
    + createPromotion(): void
    + getPromotionDetails(): String
    + isValidFor(date: LocalDateTime): boolean
    + removePromotion(): void
  }
}

package "Statistics & Reporting" {
  class Report {
    - id: Long
    --
    - title: String
    - description: String
    - startDate: LocalDateTime
    - endDate: LocalDateTime
    - creationDate: LocalDateTime
    - statistics: List<Statistics>
    --
    + generate(): void
    + getDetails(): String
    + exportPDF(): void
  }
  class Statistics {
    - id: Long
    --
    - totalVehiclesServiced: int
    - totalRevenue: double
    - averageServiceTime: double
    - mostPopularService: String
    - dateRange: String
    --
    + getDetails(): String
  }
}

package "Workshop Management" {
  class Workshop {
    - id: Long
    --
    - name: String
    - description: String
    - RUC: String
    - address: String
    - phone: String
    - email: String
    - schedule: WeeklySchedule
    - location: String
    - manager: WorkshopManager
    - workers: List<Worker>
    - promotions: List<Promotion>
    - services: List<Service>
    - statistics: List<Statistics>
    --
    + getDetails(): String
    + editProfile(name: String, address: String, phone: String, email: String): void
    + generateReport(startDate: LocalDateTime, endDate: LocalDateTime): Report
    + listAvailableServices(): List<Service>
    + acceptAppointment(appointment: Appointment): void
    + rejectAppointment(appointment: Appointment): void
    + createRepairOrder(appointment: Appointment): void
  }
  class Appointment {
    - id: Long
    --
    - client: VehicleOwner
    - service: Service
    - workshop: Workshop
    - status: AppointmentStatus
    - assignedWorker: Worker
    - date: LocalDateTime
    --
    + getDetails(): String
    + cancel(): void
    + reschedule(newDate: LocalDateTime): void
  }
  enum AppointmentStatus {
    PENDING
    CONFIRMED
    COMPLETED
    CANCELLED
  }
  abstract class ServiceFactory {
    + createService(serviceType: ServiceType): Service
  }
  enum ServiceType {
    REPAIR
    MAINTENANCE
  }
  class RepairServiceFactory extends ServiceFactory {
    + createService(): Service
  }
  class MaintenanceServiceFactory extends ServiceFactory {
    + createService(): Service
  }
  interface Service {
    + displayInformation(): String
    + getPrice(): double
  }
  class RepairService implements Service {
    + displayInformation(): String
    + getPrice(): double
  }
  class MaintenanceService implements Service {
    + displayInformation(): String
    + getPrice(): double
  }
  class BasicService implements Service {
    - name: String
    - description: String
    - price: double
    --
    + displayInformation(): String
    + getPrice(): double
  }
  class ServicePackage implements Service {
    - name: String
    - services: List<Service>
    --
    + add(service: Service): void
    + remove(service: Service): void
    + getServices(): List<Service>
    + displayInformation(): String
    + getPrice(): double
  }
  class RepairOrder {
    - id: Long
    --
    - appointment: Appointment
    - observations: List<Observation>
    - spareParts: List<Spare>
    - service: Service
    - assignedWorker: Worker
    - status: RepairStatus
    - cost: double
    - startDate: LocalDateTime
    - endDate: LocalDateTime
    --
    + getDetails(): String
    + updateStatus(newStatus: ServiceStatus): void
    + addObservation(content: String, worker: Worker): void
    + calculateCost(): double
    + finalizeOrder(): void
  }
  class Observation {
    - id: Long
    --
    - content: String
    - date: LocalDateTime
    - worker: Worker
    --
    + getDetails(): String
  }
  enum RepairStatus {
    IN_PROGRESS
    WAITING_PARTS
    COMPLETED
    CANCELLED
  }
  class WeeklySchedule {
    - id: Long
    --
    - openingTime: LocalTime
    - closingTime: LocalTime
    - workingDays: List<String>
    --
    + getSchedule(): Map<String, String>
  }
  class VehicleTrackingFacade {
    - statusService: VehicleStatusService
    - NotificationService: NotificationService
    - historyService: VehicleHistoryService
    -- 
    + updateVehicleStatus(vehicleId: Long, newState: VehicleState): void
    + getVehicleStatus(vehicleId: Long): VehicleState
  }
  class VehicleStatusService {
    - state: VehicleState
    --
    + updateStatus(vehicleId: Long, status: VehicleState): void
    + notifyObservers(): void
  }
  class VehicleHistoryService {
    + logStatusChange(vehicleId: Long, status: VehicleState): void
  }
  abstract class VehicleState {
    + State(vehicleId: Long, service: VehicleStatusService): void
  }
  class PendingState extends VehicleState {
    + getState(): String
  }
  class InServiceState extends VehicleState {
    + getState(): String
  }
  class ReadyForPickupState extends VehicleState {
    + getState(): String
  }
  class DeliveredState extends VehicleState {
    + getState(): String
  }
  interface VehicleObserver {
    + updateNotification(vehicleId: Long, status: VehicleState): void
  }
  class WorkShopDashboard implements VehicleObserver {
    + updateNotification(vehicleId: Long, status: VehicleState): void
  }
  class CustomerDashboard implements VehicleObserver {
    + updateNotification(vehicleId: Long, status: VehicleState): void
  }
  class NotificationStateService implements VehicleObserver {
    + updateNotification(vehicleId: Long, status: VehicleState): void
    + notifyCustomer(vehicleId: Long, status: VehicleState): void
  }
}

'Relationships
'Person <|-- VehicleOwner
'Person <|-- WorkshopManager
'Person <|-- Worker
Person "1" -up-> "0..*" User
'Worker <|-- Mechanic
'Worker <|-- Technician
User "1..*" -- "*" Access
User .left.> AuthProvider
User .right.> UserRole
User "1..*" -left-> "*" Notification
User "1..*" -right-> "*" Feedback
Access .right.> AccessType
AccessLog .right.> AccessResult
(User, Access) .> AccessLog
VehicleOwner "1" -up-> "1..*" Vehicle
VehicleOwner "1" -down-> "0..*" Payment
VehicleOwner "1" -up-> "0..*" Review
'Vehicle .right.> VehicleState
Vehicle .left.> VehicleType
Vehicle "1" o-- "0..*" Spare
Vehicle "1" -up-> "*" ChatSession
ServiceRecord .right.> ServiceStatus
ServiceRecord "1..*" -down- "1" Vehicle
ServiceRecord "1" -down-> "0..*" Worker
'PaymentMethod <|.. PayPal
'PaymentMethod <|.. CreditCard
'PaymentMethod <|.. YapePlin
Payment .right.> PaymentStatus
Payment -down-> PaymentMethod
'Notification <|-- InAppNotification
'Notification <|-- EmailNotification
'Notification <|-- SMSNotification
NotificationService .right.> NotificationType
NotificationService .down.> NotificationFactory
EmailNotificationFactory .up.> EmailNotification
SMSNotificationFactory .up.> SMSNotification
InAppNotificationFactory .up.> InAppNotification
ChatSession "1" -down-> "0..*" Message
MediaAttachment .right.> MediaType
Message "1" -down-> "0..*" MediaAttachment
Report "1" -down-> "1..*" Statistics
Workshop "1" -up-> "*" Worker
Workshop "1" -right-> "0..*" Promotion
Workshop "1" -down-> "1..*" Service
Workshop "1" -down-> "0..*" Statistics
Workshop -right-> ServiceFactory
Workshop "1" -right-> "0..*" Appointment
Workshop "1" --> "1" WeeklySchedule
Workshop -down-> VehicleTrackingFacade
WorkshopManager "1" -- "1" Workshop
'ServiceFactory <|.. RepairServiceFactory
'ServiceFactory <|.. MaintenanceFactory
ServiceFactory .down.> ServiceType
RepairServiceFactory .up.> RepairService
MaintenanceServiceFactory .up.> MaintenanceService
'Service <|.. BasicService
'Service <|.. ServicePackage
'Service <|.. RepairService
'Service <|.. MaintenanceService
Service <--* ServicePackage
Appointment .down.> AppointmentStatus
Appointment "1" -left-> "*" RepairOrder
RepairOrder --> RepairStatus
RepairOrder "1" -left-> "0..*" Observation
RepairOrder "1" -up-> "0..*" Spare
RepairOrder "1" -down-> "1" Worker
RepairOrder "1" -right-> "1" Service
VehicleTrackingFacade -left-> VehicleStatusService
VehicleTrackingFacade -down-> NotificationStateService
VehicleTrackingFacade -down-> VehicleHistoryService
'VehicleStatus <|-- PendingState
'VehicleStatus <|-- InServiceState
'VehicleStatus <|-- ReadyForPickupState
'VehicleStatus <|-- DeliveredState
VehicleStatusService <-- VehicleState
VehicleStatusService o--> VehicleState
VehicleStatusService --> VehicleObserver
VehicleDirector -right-> VehicleBuilder
SportCar ..> Vehicle
Sedan ..> Vehicle
SUV ..> Vehicle
ElectricCar ..> Vehicle

@enduml